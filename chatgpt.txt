To make the parent `div` the same size as the Google Maps element, you can use CSS to control the dimensions of these elements. 

Here's an example CSS code that you could use:


.map-container {
  position: relative;
  height: 400px; /* specify a fixed height for the container */
}

.map-div-inner {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%; /* set the width to 100% of the parent container */
  height: 100%; /* set the height to 100% of the parent container */
}


In this example, we first specify a fixed height for the `.map-container` element that will contain the Google Maps element. We then use `position: relative` on `.map-container` so that we can position the Google Maps element inside the container. 

Next, we define the `.map-div-inner` element which will be used for the Google Maps element. We set `position: absolute` on this element so that it positions itself relative to the nearest positioned ancestor (in this case, `.map-container`). We then set `top: 0` and `left: 0` to make sure the map element starts at the top-left corner of the container.

Finally, we set `width: 100%` and `height: 100%` so that the width and height of the Google Maps element is equal to the size of the parent container. You can wrap the Map component in a `div` element with the `.map-container` class to add these styles:


<div className="map-container">
  <Map
    className="map-div-inner"
    google={props.google}
    zoom={10}
    center={{ lat: props.latitude_ns, lng: props.longitude_ew }}
    initialCenter={{ lat: props.latitude_ns, lng: props.longitude_ew }}
    style={style}
  />
</div>


With these styles, the `.map-container` element will have a fixed height of 400px, and the `.map-div-inner` element inside it will fill the entire container, making the map element the same size as the parent `div`.